'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _department = require('../ethereum/department');

var _department2 = _interopRequireDefault(_department);

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _token = require('../ethereum/token');

var _token2 = _interopRequireDefault(_token);

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../routes');

var _measure = require('../utils/measure');

var _measure2 = _interopRequireDefault(_measure);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/littlewhite/NCUcoin/pages/index.js?entry';


var DepartmentIndex = function (_Component) {
    (0, _inherits3.default)(DepartmentIndex, _Component);

    function DepartmentIndex() {
        var _ref;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, DepartmentIndex);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DepartmentIndex.__proto__ || (0, _getPrototypeOf2.default)(DepartmentIndex)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            refreshing: true,
            names: [],
            departments: []
        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(DepartmentIndex, [{
        key: 'componentDidMount',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                var _this2 = this;

                var address, departments, names;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return _factory2.default.methods.tokenAddress().call();

                            case 2:
                                address = _context3.sent;
                                _context3.next = 5;
                                return (0, _measure2.default)('get deployed Departmwnts', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                                    return _regenerator2.default.wrap(function _callee$(_context) {
                                        while (1) {
                                            switch (_context.prev = _context.next) {
                                                case 0:
                                                    _context.next = 2;
                                                    return _factory2.default.methods.getDeployedDepartments().call();

                                                case 2:
                                                    return _context.abrupt('return', _context.sent);

                                                case 3:
                                                case 'end':
                                                    return _context.stop();
                                            }
                                        }
                                    }, _callee, _this2);
                                })));

                            case 5:
                                departments = _context3.sent;
                                _context3.next = 8;
                                return _promise2.default.all(departments.map(function () {
                                    var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(address) {
                                        var department, summary;
                                        return _regenerator2.default.wrap(function _callee2$(_context2) {
                                            while (1) {
                                                switch (_context2.prev = _context2.next) {
                                                    case 0:
                                                        department = (0, _department2.default)(address);
                                                        _context2.next = 3;
                                                        return department.methods.getSummary().call();

                                                    case 3:
                                                        summary = _context2.sent;
                                                        return _context2.abrupt('return', summary[0]);

                                                    case 5:
                                                    case 'end':
                                                        return _context2.stop();
                                                }
                                            }
                                        }, _callee2, _this2);
                                    }));

                                    return function (_x) {
                                        return _ref4.apply(this, arguments);
                                    };
                                }()));

                            case 8:
                                names = _context3.sent;

                                this.setState({ address: address, names: names, departments: departments });

                            case 10:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function componentDidMount() {
                return _ref2.apply(this, arguments);
            }

            return componentDidMount;
        }()
    }, {
        key: 'renderCampaigns',
        value: function renderCampaigns() {
            var _this3 = this;

            var items = this.state.departments.map(function (address, index) {

                return {
                    header: _this3.state.names[index],
                    description: _react2.default.createElement(_routes.Link, { route: '/departments/' + address, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 42
                        }
                    }, _react2.default.createElement('a', {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 43
                        }
                    }, 'View Department')),
                    fluid: true
                };
            });

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 50
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 55
                }
            }, _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 56
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 57
                }
            }, 'NCU \u5404\u7CFB\u6821\u53CB'), this.renderCampaigns()));
        }
    }]);

    return DepartmentIndex;
}(_react.Component);

exports.default = DepartmentIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiRGVwYXJ0bWVudEluZGV4IiwiX0NvbXBvbmVudCIsIl9yZWYiLCJfdGVtcCIsIl90aGlzIiwiX3JldCIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiX19wcm90b19fIiwiY2FsbCIsImFwcGx5IiwiY29uY2F0Iiwic3RhdGUiLCJyZWZyZXNoaW5nIiwibmFtZXMiLCJkZXBhcnRtZW50cyIsImtleSIsInZhbHVlIiwiX3JlZjIiLCJtYXJrIiwiX2NhbGxlZTMiLCJfdGhpczIiLCJhZGRyZXNzIiwid3JhcCIsIl9jYWxsZWUzJCIsIl9jb250ZXh0MyIsInByZXYiLCJuZXh0IiwibWV0aG9kcyIsInRva2VuQWRkcmVzcyIsInNlbnQiLCJfY2FsbGVlIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsImdldERlcGxveWVkRGVwYXJ0bWVudHMiLCJhYnJ1cHQiLCJzdG9wIiwiYWxsIiwibWFwIiwiX3JlZjQiLCJfY2FsbGVlMiIsImRlcGFydG1lbnQiLCJzdW1tYXJ5IiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwiZ2V0U3VtbWFyeSIsIl94Iiwic2V0U3RhdGUiLCJjb21wb25lbnREaWRNb3VudCIsInJlbmRlckNhbXBhaWducyIsIl90aGlzMyIsIml0ZW1zIiwiaW5kZXgiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJyb3V0ZSIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZmx1aWQiLCJHcm91cCIsInJlbmRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUVBOzs7Ozs7QUFWQSxJQUFJQSxl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