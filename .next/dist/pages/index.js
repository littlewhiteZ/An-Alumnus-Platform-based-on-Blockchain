'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _department = require('../ethereum/department');

var _department2 = _interopRequireDefault(_department);

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _token = require('../ethereum/token');

var _token2 = _interopRequireDefault(_token);

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/littlewhite/NCUcoin/pages/index.js?entry';


var CampaignIndex = function (_Component) {
    (0, _inherits3.default)(CampaignIndex, _Component);

    function CampaignIndex() {
        var _ref;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, CampaignIndex);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            address: '',
            newperson: '',
            errorMessage: '',
            errorvisible: true,
            loading: false
        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(CampaignIndex, [{
        key: 'componentDidMount',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var address;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return _factory2.default.methods.tokenAddress().call();

                            case 2:
                                address = _context.sent;

                                this.setState({ address: address });

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function componentDidMount() {
                return _ref2.apply(this, arguments);
            }

            return componentDidMount;
        }()
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 39
                }
            }, _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                }
            }, _react2.default.createElement(_routes.Link, { route: '/departments/index', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 42
                }
            }, _react2.default.createElement(_semanticUiReact.Button, {
                floated: 'left',
                content: '\u6821\u53CB',
                size: 'massive',
                primary: true,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 43
                }
            }))), _react2.default.createElement(_routes.Link, { route: '/manage/index', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 51
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 52
                }
            }, _react2.default.createElement(_semanticUiReact.Button, {
                floated: 'right',
                content: '\u7BA1\u7406\u54E1',
                size: 'massive',
                primary: true,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 53
                }
            })))));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                var _this2 = this;

                var campaigns, names;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return _factory2.default.methods.getDeployedDepartments().call();

                            case 2:
                                campaigns = _context3.sent;
                                _context3.next = 5;
                                return _promise2.default.all(campaigns.map(function () {
                                    var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(address) {
                                        var department, summary;
                                        return _regenerator2.default.wrap(function _callee2$(_context2) {
                                            while (1) {
                                                switch (_context2.prev = _context2.next) {
                                                    case 0:
                                                        department = (0, _department2.default)(address);
                                                        _context2.next = 3;
                                                        return department.methods.getSummary().call();

                                                    case 3:
                                                        summary = _context2.sent;
                                                        return _context2.abrupt('return', summary[0]);

                                                    case 5:
                                                    case 'end':
                                                        return _context2.stop();
                                                }
                                            }
                                        }, _callee2, _this2);
                                    }));

                                    return function (_x) {
                                        return _ref4.apply(this, arguments);
                                    };
                                }()));

                            case 5:
                                names = _context3.sent;
                                return _context3.abrupt('return', { campaigns: campaigns, names: names });

                            case 7:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getInitialProps() {
                return _ref3.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25JbmRleCIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsInN0YXRlIiwiYWRkcmVzcyIsIm5ld3BlcnNvbiIsImVycm9yTWVzc2FnZSIsImVycm9ydmlzaWJsZSIsImxvYWRpbmciLCJrZXkiLCJ2YWx1ZSIsIl9yZWYyIiwibWFyayIsIl9jYWxsZWUiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwibWV0aG9kcyIsInRva2VuQWRkcmVzcyIsInNlbnQiLCJzZXRTdGF0ZSIsInN0b3AiLCJjb21wb25lbnREaWRNb3VudCIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJvdXRlIiwiZmxvYXRlZCIsImNvbnRlbnQiLCJzaXplIiwicHJpbWFyeSIsIl9yZWYzIiwiX2NhbGxlZTMiLCJfdGhpczIiLCJjYW1wYWlnbnMiLCJuYW1lcyIsIl9jYWxsZWUzJCIsIl9jb250ZXh0MyIsImdldERlcGxveWVkRGVwYXJ0bWVudHMiLCJhbGwiLCJtYXAiLCJfcmVmNCIsIl9jYWxsZWUyIiwiZGVwYXJ0bWVudCIsInN1bW1hcnkiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJnZXRTdW1tYXJ5IiwiYWJydXB0IiwiX3giLCJnZXRJbml0aWFsUHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQVJB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