'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _department = require('../../ethereum/department');

var _department2 = _interopRequireDefault(_department);

var _factory = require('../../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _token = require('../../ethereum/token');

var _token2 = _interopRequireDefault(_token);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

var _measure = require('../../utils/measure');

var _measure2 = _interopRequireDefault(_measure);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/littlewhite/NCUcoin/pages/departments/index.js?entry';


var Index = function (_Component) {
    (0, _inherits3.default)(Index, _Component);

    function Index() {
        var _ref;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, Index);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Index.__proto__ || (0, _getPrototypeOf2.default)(Index)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            refreshing: true,
            names: [],
            departments: []
        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(Index, [{
        key: 'componentDidMount',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                var _this2 = this;

                var address, departments, names;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return _factory2.default.methods.tokenAddress().call();

                            case 2:
                                address = _context3.sent;
                                _context3.next = 5;
                                return (0, _measure2.default)('get deployed Departmwnts', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                                    return _regenerator2.default.wrap(function _callee$(_context) {
                                        while (1) {
                                            switch (_context.prev = _context.next) {
                                                case 0:
                                                    _context.next = 2;
                                                    return _factory2.default.methods.getDeployedDepartments().call();

                                                case 2:
                                                    return _context.abrupt('return', _context.sent);

                                                case 3:
                                                case 'end':
                                                    return _context.stop();
                                            }
                                        }
                                    }, _callee, _this2);
                                })));

                            case 5:
                                departments = _context3.sent;
                                _context3.next = 8;
                                return _promise2.default.all(departments.map(function () {
                                    var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(address) {
                                        var department, summary;
                                        return _regenerator2.default.wrap(function _callee2$(_context2) {
                                            while (1) {
                                                switch (_context2.prev = _context2.next) {
                                                    case 0:
                                                        department = (0, _department2.default)(address);
                                                        _context2.next = 3;
                                                        return department.methods.getSummary().call();

                                                    case 3:
                                                        summary = _context2.sent;
                                                        return _context2.abrupt('return', summary[0]);

                                                    case 5:
                                                    case 'end':
                                                        return _context2.stop();
                                                }
                                            }
                                        }, _callee2, _this2);
                                    }));

                                    return function (_x) {
                                        return _ref4.apply(this, arguments);
                                    };
                                }()));

                            case 8:
                                names = _context3.sent;

                                this.setState({ address: address, names: names, departments: departments, refreshing: false });

                            case 10:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function componentDidMount() {
                return _ref2.apply(this, arguments);
            }

            return componentDidMount;
        }()
    }, {
        key: 'renderCampaigns',
        value: function renderCampaigns() {
            var _this3 = this;

            var items = this.state.departments.map(function (address, index) {

                return {
                    header: _this3.state.names[index],
                    description: _react2.default.createElement(_routes.Link, { route: '/departments/' + address, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 42
                        }
                    }, _react2.default.createElement('a', {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 43
                        }
                    }, 'View Department')),
                    fluid: true
                };
            });

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 50
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 55
                }
            }, _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 56
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 57
                }
            }, 'NCU \u5404\u7CFB\u6821\u53CB'), _react2.default.createElement(_semanticUiReact.Dimmer, { inverted: true, active: this.state.refreshing, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 58
                }
            }, _react2.default.createElement(_semanticUiReact.Loader, { content: 'Loading', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 59
                }
            })), this.renderCampaigns()));
        }
    }]);

    return Index;
}(_react.Component);

exports.default = Index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5kZXgiLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsInJlZnJlc2hpbmciLCJuYW1lcyIsImRlcGFydG1lbnRzIiwia2V5IiwidmFsdWUiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlMyIsIl90aGlzMiIsImFkZHJlc3MiLCJ3cmFwIiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwicHJldiIsIm5leHQiLCJtZXRob2RzIiwidG9rZW5BZGRyZXNzIiwic2VudCIsIl9jYWxsZWUiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwiZ2V0RGVwbG95ZWREZXBhcnRtZW50cyIsImFicnVwdCIsInN0b3AiLCJhbGwiLCJtYXAiLCJfcmVmNCIsIl9jYWxsZWUyIiwiZGVwYXJ0bWVudCIsInN1bW1hcnkiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJnZXRTdW1tYXJ5IiwiX3giLCJzZXRTdGF0ZSIsImNvbXBvbmVudERpZE1vdW50IiwicmVuZGVyQ2FtcGFpZ25zIiwiX3RoaXMzIiwiaXRlbXMiLCJpbmRleCIsImhlYWRlciIsImRlc2NyaXB0aW9uIiwiY3JlYXRlRWxlbWVudCIsInJvdXRlIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJmbHVpZCIsIkdyb3VwIiwicmVuZGVyIiwiaW52ZXJ0ZWQiLCJhY3RpdmUiLCJjb250ZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FB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