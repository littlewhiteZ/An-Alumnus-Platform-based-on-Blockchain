'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _department = require('../../ethereum/department');

var _department2 = _interopRequireDefault(_department);

var _factory = require('../../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _token = require('../../ethereum/token');

var _token2 = _interopRequireDefault(_token);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/littlewhite/NCUcoin/pages/departments/index.js?entry';


var DepartmentIndex = function (_Component) {
    (0, _inherits3.default)(DepartmentIndex, _Component);

    function DepartmentIndex() {
        var _ref;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, DepartmentIndex);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DepartmentIndex.__proto__ || (0, _getPrototypeOf2.default)(DepartmentIndex)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            address: '',
            newperson: '',
            errorMessage: '',
            errorvisible: true,
            loading: false
        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(DepartmentIndex, [{
        key: 'componentDidMount',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var address;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return _factory2.default.methods.tokenAddress().call();

                            case 2:
                                address = _context.sent;

                                this.setState({ address: address });

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function componentDidMount() {
                return _ref2.apply(this, arguments);
            }

            return componentDidMount;
        }()
    }, {
        key: 'renderCampaigns',
        value: function renderCampaigns() {
            var _this2 = this;

            var items = this.props.campaigns.map(function (address, index) {

                console.log(_this2.props.names);
                return {
                    header: _this2.props.names[index],
                    description: _react2.default.createElement(_routes.Link, { route: '/departments/' + address, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 44
                        }
                    }, _react2.default.createElement('a', {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 45
                        }
                    }, 'View Department')),
                    fluid: true
                };
            });

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 52
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 57
                }
            }, _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 58
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 59
                }
            }, 'NCU \u5404\u7CFB\u6821\u53CB'), this.renderCampaigns()));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                var _this3 = this;

                var campaigns, names;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return _factory2.default.methods.getDeployedDepartments().call();

                            case 2:
                                campaigns = _context3.sent;
                                _context3.next = 5;
                                return _promise2.default.all(campaigns.map(function () {
                                    var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(address) {
                                        var department, summary;
                                        return _regenerator2.default.wrap(function _callee2$(_context2) {
                                            while (1) {
                                                switch (_context2.prev = _context2.next) {
                                                    case 0:
                                                        department = (0, _department2.default)(address);
                                                        _context2.next = 3;
                                                        return department.methods.getSummary().call();

                                                    case 3:
                                                        summary = _context2.sent;
                                                        return _context2.abrupt('return', summary[0]);

                                                    case 5:
                                                    case 'end':
                                                        return _context2.stop();
                                                }
                                            }
                                        }, _callee2, _this3);
                                    }));

                                    return function (_x) {
                                        return _ref4.apply(this, arguments);
                                    };
                                }()));

                            case 5:
                                names = _context3.sent;
                                return _context3.abrupt('return', { campaigns: campaigns, names: names });

                            case 7:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getInitialProps() {
                return _ref3.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return DepartmentIndex;
}(_react.Component);

exports.default = DepartmentIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiRGVwYXJ0bWVudEluZGV4IiwiX0NvbXBvbmVudCIsIl9yZWYiLCJfdGVtcCIsIl90aGlzIiwiX3JldCIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiX19wcm90b19fIiwiY2FsbCIsImFwcGx5IiwiY29uY2F0Iiwic3RhdGUiLCJhZGRyZXNzIiwibmV3cGVyc29uIiwiZXJyb3JNZXNzYWdlIiwiZXJyb3J2aXNpYmxlIiwibG9hZGluZyIsImtleSIsInZhbHVlIiwiX3JlZjIiLCJtYXJrIiwiX2NhbGxlZSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJtZXRob2RzIiwidG9rZW5BZGRyZXNzIiwic2VudCIsInNldFN0YXRlIiwic3RvcCIsImNvbXBvbmVudERpZE1vdW50IiwicmVuZGVyQ2FtcGFpZ25zIiwiX3RoaXMyIiwiaXRlbXMiLCJwcm9wcyIsImNhbXBhaWducyIsIm1hcCIsImluZGV4IiwiY29uc29sZSIsImxvZyIsIm5hbWVzIiwiaGVhZGVyIiwiZGVzY3JpcHRpb24iLCJjcmVhdGVFbGVtZW50Iiwicm91dGUiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImZsdWlkIiwiR3JvdXAiLCJyZW5kZXIiLCJfcmVmMyIsIl9jYWxsZWUzIiwiX3RoaXMzIiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwiZ2V0RGVwbG95ZWREZXBhcnRtZW50cyIsImFsbCIsIl9yZWY0IiwiX2NhbGxlZTIiLCJkZXBhcnRtZW50Iiwic3VtbWFyeSIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsImdldFN1bW1hcnkiLCJhYnJ1cHQiLCJfeCIsImdldEluaXRpYWxQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFD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