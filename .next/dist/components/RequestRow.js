'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _department = require('../ethereum/department');

var _department2 = _interopRequireDefault(_department);

var _ipfs = require('../utils/ipfs');

var _ipfs2 = _interopRequireDefault(_ipfs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/littlewhite/NCUcoin/components/RequestRow.js';


var RequestRow = function (_Component) {
    (0, _inherits3.default)(RequestRow, _Component);

    function RequestRow() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, RequestRow);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RequestRow.__proto__ || (0, _getPrototypeOf2.default)(RequestRow)).call.apply(_ref, [this].concat(args))), _this), _this.onApprove = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
            var department, accounts;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            department = (0, _department2.default)(_this.props.address);
                            _context.next = 3;
                            return _web2.default.eth.getAccounts();

                        case 3:
                            accounts = _context.sent;

                        case 4:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, _this2);
        })), _this.onUpdate = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
            var department, accounts;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            department = (0, _department2.default)(_this.props.address);
                            _context2.next = 3;
                            return _web2.default.eth.getAccounts();

                        case 3:
                            accounts = _context2.sent;

                        case 4:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, _this2);
        })), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(RequestRow, [{
        key: 'componentDidMount',
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function componentDidMount() {
                return _ref4.apply(this, arguments);
            }

            return componentDidMount;
        }()
    }, {
        key: 'render',
        value: function render() {
            var Row = _semanticUiReact.Table.Row,
                Cell = _semanticUiReact.Table.Cell;
            var person = this.props.person;

            return _react2.default.createElement(Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                }
            }, _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 42
                }
            }, person.id), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 43
                }
            }, person.name), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 44
                }
            }, person.job), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 45
                }
            }, person.media), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            }, person.email), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 47
                }
            }, person.isApproved ? _react2.default.createElement(_semanticUiReact.Button, { color: 'green', basic: true, disabled: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 48
                }
            }, 'Update') : _react2.default.createElement(_semanticUiReact.Button, { color: 'green', basic: true, onClick: this.onUpdate, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 49
                }
            }, 'Update')), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 52
                }
            }, !person.isApproved ? _react2.default.createElement(_semanticUiReact.Button, { color: 'green', basic: true, disabled: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 53
                }
            }, 'Approve') : _react2.default.createElement(_semanticUiReact.Button, { color: 'teal', basic: true, onClick: this.onApprove, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 54
                }
            }, 'Approve')));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(props) {
                var person;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                person = props.query.person;
                                return _context4.abrupt('return', { person: person });

                            case 2:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function getInitialProps(_x) {
                return _ref5.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return RequestRow;
}(_react.Component);

exports.default = RequestRow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVxdWVzdFJvdyIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsIm9uQXBwcm92ZSIsIm1hcmsiLCJfY2FsbGVlIiwiZGVwYXJ0bWVudCIsImFjY291bnRzIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInByb3BzIiwiYWRkcmVzcyIsImV0aCIsImdldEFjY291bnRzIiwic2VudCIsInN0b3AiLCJvblVwZGF0ZSIsIl9jYWxsZWUyIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwia2V5IiwidmFsdWUiLCJfcmVmNCIsIl9jYWxsZWUzIiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwiY29tcG9uZW50RGlkTW91bnQiLCJyZW5kZXIiLCJSb3ciLCJDZWxsIiwicGVyc29uIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiaWQiLCJuYW1lIiwiam9iIiwibWVkaWEiLCJlbWFpbCIsImlzQXBwcm92ZWQiLCJjb2xvciIsImJhc2ljIiwiZGlzYWJsZWQiLCJvbkNsaWNrIiwiX3JlZjUiLCJfY2FsbGVlNCIsIl9jYWxsZWU0JCIsIl9jb250ZXh0NCIsInF1ZXJ5IiwiYWJydXB0IiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUxBLElBQUlBLGVBQWUscURBQW5COzs7QUFPQSxJQUFJQyxhQUFhLFVBQVVDLFVBQVYsRUFBc0I7QUFDbkMsNEJBQVVELFVBQVYsRUFBc0JDLFVBQXRCOztBQUVBLGFBQVNELFVBQVQsR0FBc0I7QUFDbEIsWUFBSUUsSUFBSjtBQUFBLFlBQ0lDLFNBQVMsSUFEYjs7QUFHQSxZQUFJQyxLQUFKLEVBQVdDLEtBQVgsRUFBa0JDLElBQWxCOztBQUVBLHNDQUFnQixJQUFoQixFQUFzQk4sVUFBdEI7O0FBRUEsYUFBSyxJQUFJTyxPQUFPQyxVQUFVQyxNQUFyQixFQUE2QkMsT0FBT0MsTUFBTUosSUFBTixDQUFwQyxFQUFpREssT0FBTyxDQUE3RCxFQUFnRUEsT0FBT0wsSUFBdkUsRUFBNkVLLE1BQTdFLEVBQXFGO0FBQ2pGRixpQkFBS0UsSUFBTCxJQUFhSixVQUFVSSxJQUFWLENBQWI7QUFDSDs7QUFFRCxlQUFPTixRQUFRRixTQUFTQyxRQUFRLHlDQUEyQixJQUEzQixFQUFpQyxDQUFDSCxPQUFPRixXQUFXYSxTQUFYLElBQXdCLDhCQUF1QmIsVUFBdkIsQ0FBaEMsRUFBb0VjLElBQXBFLENBQXlFQyxLQUF6RSxDQUErRWIsSUFBL0UsRUFBcUYsQ0FBQyxJQUFELEVBQU9jLE1BQVAsQ0FBY04sSUFBZCxDQUFyRixDQUFqQyxDQUFSLEVBQXFKTCxLQUE5SixHQUFzS0EsTUFBTVksU0FBTixHQUFrQixpQ0FBbUIsYUFBYSxzQkFBb0JDLElBQXBCLENBQXlCLFNBQVNDLE9BQVQsR0FBbUI7QUFDL1EsZ0JBQUlDLFVBQUosRUFBZ0JDLFFBQWhCO0FBQ0EsbUJBQU8sc0JBQW9CQyxJQUFwQixDQUF5QixTQUFTQyxRQUFULENBQWtCQyxRQUFsQixFQUE0QjtBQUN4RCx1QkFBTyxDQUFQLEVBQVU7QUFDTiw0QkFBUUEsU0FBU0MsSUFBVCxHQUFnQkQsU0FBU0UsSUFBakM7QUFDSSw2QkFBSyxDQUFMO0FBQ0lOLHlDQUFhLDBCQUFXZixNQUFNc0IsS0FBTixDQUFZQyxPQUF2QixDQUFiO0FBQ0FKLHFDQUFTRSxJQUFULEdBQWdCLENBQWhCO0FBQ0EsbUNBQU8sY0FBS0csR0FBTCxDQUFTQyxXQUFULEVBQVA7O0FBRUosNkJBQUssQ0FBTDtBQUNJVCx1Q0FBV0csU0FBU08sSUFBcEI7O0FBRUosNkJBQUssQ0FBTDtBQUNBLDZCQUFLLEtBQUw7QUFDSSxtQ0FBT1AsU0FBU1EsSUFBVCxFQUFQO0FBWFI7QUFhSDtBQUNKLGFBaEJNLEVBZ0JKYixPQWhCSSxFQWdCS2hCLE1BaEJMLENBQVA7QUFpQkgsU0FuQnNPLENBQWhDLENBQXhMLEVBbUJWRSxNQUFNNEIsUUFBTixHQUFpQixpQ0FBbUIsYUFBYSxzQkFBb0JmLElBQXBCLENBQXlCLFNBQVNnQixRQUFULEdBQW9CO0FBQy9GLGdCQUFJZCxVQUFKLEVBQWdCQyxRQUFoQjtBQUNBLG1CQUFPLHNCQUFvQkMsSUFBcEIsQ0FBeUIsU0FBU2EsU0FBVCxDQUFtQkMsU0FBbkIsRUFBOEI7QUFDMUQsdUJBQU8sQ0FBUCxFQUFVO0FBQ04sNEJBQVFBLFVBQVVYLElBQVYsR0FBaUJXLFVBQVVWLElBQW5DO0FBQ0ksNkJBQUssQ0FBTDtBQUNJTix5Q0FBYSwwQkFBV2YsTUFBTXNCLEtBQU4sQ0FBWUMsT0FBdkIsQ0FBYjtBQUNBUSxzQ0FBVVYsSUFBVixHQUFpQixDQUFqQjtBQUNBLG1DQUFPLGNBQUtHLEdBQUwsQ0FBU0MsV0FBVCxFQUFQOztBQUVKLDZCQUFLLENBQUw7QUFDSVQsdUNBQVdlLFVBQVVMLElBQXJCOztBQUVKLDZCQUFLLENBQUw7QUFDQSw2QkFBSyxLQUFMO0FBQ0ksbUNBQU9LLFVBQVVKLElBQVYsRUFBUDtBQVhSO0FBYUg7QUFDSixhQWhCTSxFQWdCSkUsUUFoQkksRUFnQk0vQixNQWhCTixDQUFQO0FBaUJILFNBbkJxRCxDQUFoQyxDQW5CUCxFQXNDVkMsS0F0Q0UsR0FzQ00seUNBQTJCQyxLQUEzQixFQUFrQ0MsSUFBbEMsQ0F0Q2I7QUF1Q0g7O0FBRUQsK0JBQWFOLFVBQWIsRUFBeUIsQ0FBQztBQUN0QnFDLGFBQUssbUJBRGlCO0FBRXRCQyxlQUFPLFlBQVk7QUFDZixnQkFBSUMsUUFBUSxpQ0FBbUIsYUFBYSxzQkFBb0JyQixJQUFwQixDQUF5QixTQUFTc0IsUUFBVCxHQUFvQjtBQUNyRix1QkFBTyxzQkFBb0JsQixJQUFwQixDQUF5QixTQUFTbUIsU0FBVCxDQUFtQkMsU0FBbkIsRUFBOEI7QUFDMUQsMkJBQU8sQ0FBUCxFQUFVO0FBQ04sZ0NBQVFBLFVBQVVqQixJQUFWLEdBQWlCaUIsVUFBVWhCLElBQW5DO0FBQ0ksaUNBQUssQ0FBTDtBQUNBLGlDQUFLLEtBQUw7QUFDSSx1Q0FBT2dCLFVBQVVWLElBQVYsRUFBUDtBQUhSO0FBS0g7QUFDSixpQkFSTSxFQVFKUSxRQVJJLEVBUU0sSUFSTixDQUFQO0FBU0gsYUFWMkMsQ0FBaEMsQ0FBWjs7QUFZQSxxQkFBU0csaUJBQVQsR0FBNkI7QUFDekIsdUJBQU9KLE1BQU14QixLQUFOLENBQVksSUFBWixFQUFrQlAsU0FBbEIsQ0FBUDtBQUNIOztBQUVELG1CQUFPbUMsaUJBQVA7QUFDSCxTQWxCTTtBQUZlLEtBQUQsRUFxQnRCO0FBQ0NOLGFBQUssUUFETjtBQUVDQyxlQUFPLFNBQVNNLE1BQVQsR0FBa0I7QUFDckIsZ0JBQUlDLE1BQU0sdUJBQU1BLEdBQWhCO0FBQUEsZ0JBQ0lDLE9BQU8sdUJBQU1BLElBRGpCO0FBRUEsZ0JBQUlDLFNBQVMsS0FBS3BCLEtBQUwsQ0FBV29CLE1BQXhCOztBQUdBLG1CQUFPLGdCQUFNQyxhQUFOLENBQ0hILEdBREcsRUFFSDtBQUNJSSwwQkFBVTtBQUNOQyw4QkFBVW5ELFlBREo7QUFFTm9ELGdDQUFZO0FBRk47QUFEZCxhQUZHLEVBUUgsZ0JBQU1ILGFBQU4sQ0FDSUYsSUFESixFQUVJO0FBQ0lHLDBCQUFVO0FBQ05DLDhCQUFVbkQsWUFESjtBQUVOb0QsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSUosT0FBT0ssRUFSWCxDQVJHLEVBa0JILGdCQUFNSixhQUFOLENBQ0lGLElBREosRUFFSTtBQUNJRywwQkFBVTtBQUNOQyw4QkFBVW5ELFlBREo7QUFFTm9ELGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUlKLE9BQU9NLElBUlgsQ0FsQkcsRUE0QkgsZ0JBQU1MLGFBQU4sQ0FDSUYsSUFESixFQUVJO0FBQ0lHLDBCQUFVO0FBQ05DLDhCQUFVbkQsWUFESjtBQUVOb0QsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSUosT0FBT08sR0FSWCxDQTVCRyxFQXNDSCxnQkFBTU4sYUFBTixDQUNJRixJQURKLEVBRUk7QUFDSUcsMEJBQVU7QUFDTkMsOEJBQVVuRCxZQURKO0FBRU5vRCxnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJSixPQUFPUSxLQVJYLENBdENHLEVBZ0RILGdCQUFNUCxhQUFOLENBQ0lGLElBREosRUFFSTtBQUNJRywwQkFBVTtBQUNOQyw4QkFBVW5ELFlBREo7QUFFTm9ELGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUlKLE9BQU9TLEtBUlgsQ0FoREcsRUEwREgsZ0JBQU1SLGFBQU4sQ0FDSUYsSUFESixFQUVJO0FBQ0lHLDBCQUFVO0FBQ05DLDhCQUFVbkQsWUFESjtBQUVOb0QsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSUosT0FBT1UsVUFBUCxHQUFvQixnQkFBTVQsYUFBTiwwQkFFaEIsRUFBRVUsT0FBTyxPQUFULEVBQWtCQyxPQUFPLElBQXpCLEVBQStCQyxVQUFVLElBQXpDLEVBQStDWCxVQUFVO0FBQ2pEQyw4QkFBVW5ELFlBRHVDO0FBRWpEb0QsZ0NBQVk7QUFGcUM7QUFBekQsYUFGZ0IsRUFPaEIsUUFQZ0IsQ0FBcEIsR0FRSSxnQkFBTUgsYUFBTiwwQkFFQSxFQUFFVSxPQUFPLE9BQVQsRUFBa0JDLE9BQU8sSUFBekIsRUFBK0JFLFNBQVMsS0FBSzVCLFFBQTdDLEVBQXVEZ0IsVUFBVTtBQUN6REMsOEJBQVVuRCxZQUQrQztBQUV6RG9ELGdDQUFZO0FBRjZDO0FBQWpFLGFBRkEsRUFPQSxRQVBBLENBaEJSLENBMURHLEVBb0ZILGdCQUFNSCxhQUFOLENBQ0lGLElBREosRUFFSTtBQUNJRywwQkFBVTtBQUNOQyw4QkFBVW5ELFlBREo7QUFFTm9ELGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUksQ0FBQ0osT0FBT1UsVUFBUixHQUFxQixnQkFBTVQsYUFBTiwwQkFFakIsRUFBRVUsT0FBTyxPQUFULEVBQWtCQyxPQUFPLElBQXpCLEVBQStCQyxVQUFVLElBQXpDLEVBQStDWCxVQUFVO0FBQ2pEQyw4QkFBVW5ELFlBRHVDO0FBRWpEb0QsZ0NBQVk7QUFGcUM7QUFBekQsYUFGaUIsRUFPakIsU0FQaUIsQ0FBckIsR0FRSSxnQkFBTUgsYUFBTiwwQkFFQSxFQUFFVSxPQUFPLE1BQVQsRUFBaUJDLE9BQU8sSUFBeEIsRUFBOEJFLFNBQVMsS0FBSzVDLFNBQTVDLEVBQXVEZ0MsVUFBVTtBQUN6REMsOEJBQVVuRCxZQUQrQztBQUV6RG9ELGdDQUFZO0FBRjZDO0FBQWpFLGFBRkEsRUFPQSxTQVBBLENBaEJSLENBcEZHLENBQVA7QUErR0g7QUF2SEYsS0FyQnNCLENBQXpCLEVBNklJLENBQUM7QUFDRGQsYUFBSyxpQkFESjtBQUVEQyxlQUFPLFlBQVk7QUFDZixnQkFBSXdCLFFBQVEsaUNBQW1CLGFBQWEsc0JBQW9CNUMsSUFBcEIsQ0FBeUIsU0FBUzZDLFFBQVQsQ0FBa0JwQyxLQUFsQixFQUF5QjtBQUMxRixvQkFBSW9CLE1BQUo7QUFDQSx1QkFBTyxzQkFBb0J6QixJQUFwQixDQUF5QixTQUFTMEMsU0FBVCxDQUFtQkMsU0FBbkIsRUFBOEI7QUFDMUQsMkJBQU8sQ0FBUCxFQUFVO0FBQ04sZ0NBQVFBLFVBQVV4QyxJQUFWLEdBQWlCd0MsVUFBVXZDLElBQW5DO0FBQ0ksaUNBQUssQ0FBTDtBQUNJcUIseUNBQVNwQixNQUFNdUMsS0FBTixDQUFZbkIsTUFBckI7QUFDQSx1Q0FBT2tCLFVBQVVFLE1BQVYsQ0FBaUIsUUFBakIsRUFBMkIsRUFBRXBCLFFBQVFBLE1BQVYsRUFBM0IsQ0FBUDs7QUFFSixpQ0FBSyxDQUFMO0FBQ0EsaUNBQUssS0FBTDtBQUNJLHVDQUFPa0IsVUFBVWpDLElBQVYsRUFBUDtBQVBSO0FBU0g7QUFDSixpQkFaTSxFQVlKK0IsUUFaSSxFQVlNLElBWk4sQ0FBUDtBQWFILGFBZjJDLENBQWhDLENBQVo7O0FBaUJBLHFCQUFTSyxlQUFULENBQXlCQyxFQUF6QixFQUE2QjtBQUN6Qix1QkFBT1AsTUFBTS9DLEtBQU4sQ0FBWSxJQUFaLEVBQWtCUCxTQUFsQixDQUFQO0FBQ0g7O0FBRUQsbUJBQU80RCxlQUFQO0FBQ0gsU0F2Qk07QUFGTixLQUFELENBN0lKOztBQXlLQSxXQUFPcEUsVUFBUDtBQUNILENBbE9nQixrQkFBakI7O2tCQW9PZUEsVSIsImZpbGUiOiJ1bmtub3duIn0=