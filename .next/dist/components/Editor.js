'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _dynamic = require('next/dist/lib/dynamic.js');

var _dynamic2 = _interopRequireDefault(_dynamic);

var _config = require('../config/config');

var _config2 = _interopRequireDefault(_config);

var _ipfs = require('../utils/ipfs');

var _ipfs2 = _interopRequireDefault(_ipfs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/littlewhite/NCUcoin/components/Editor.js';


var BraftEditorWithNoSSR = (0, _dynamic2.default)(typeof window === 'undefined' ? new (require('next/dist/lib/dynamic.js').SameLoopPromise)(function (resolve, reject) {
  eval('require.ensure = function (deps, callback) { callback(require) }');

  require.ensure([], function (require) {
    var m = require('braft-editor');

    m.__webpackChunkName = 'braft_editor_67fb48361312c6aa22976dc7f0fee9b9.js';
    resolve(m);
  }, 'chunks/braft_editor_67fb48361312c6aa22976dc7f0fee9b9.js');
}) : new (require('next/dist/lib/dynamic.js').SameLoopPromise)(function (resolve, reject) {
  var weakId = require.resolveWeak('braft-editor');

  try {
    var weakModule = __webpack_require__(weakId);

    return resolve(weakModule);
  } catch (err) {}

  require.ensure([], function (require) {
    try {
      var m = require('braft-editor');

      resolve(m);
    } catch (error) {
      reject(error);
    }
  }, 'chunks/braft_editor_67fb48361312c6aa22976dc7f0fee9b9.js');
}), {
  ssr: false
});

var Editor = function (_Component) {
  (0, _inherits3.default)(Editor, _Component);

  function Editor() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Editor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Editor.__proto__ || (0, _getPrototypeOf2.default)(Editor)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      loading: false,
      ipfsHash: null,
      buffer: ''
    }, _this.captureFile = function (file, callback) {
      console.log('capture');
      var reader = new window.FileReader();
      reader.readAsArrayBuffer(file);
      reader.onloadend = function () {
        _this.convertToBuffer(reader, callback);
      };
    }, _this.convertToBuffer = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(reader, callback) {
        var buffer;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.log('convert');
                //file is converted to a buffer to prepare for uploading to IPFS
                _context.next = 3;
                return Buffer.from(reader.result);

              case 3:
                buffer = _context.sent;
                _context.t0 = callback;

                if (!_context.t0) {
                  _context.next = 8;
                  break;
                }

                _context.next = 8;
                return callback(buffer);

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2);
      }));

      return function (_x, _x2) {
        return _ref2.apply(this, arguments);
      };
    }(), _this.uploadFn = function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(param) {
        var files, file, fileContent;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // upload request
                files = [{
                  path: param.file
                  // content: (Buffer or Readable stream)
                }];

                try {
                  // read file by Reader
                  file = files[0];
                  fileContent = _this.captureFile(file, function () {
                    var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(buffer) {
                      var result, uploadedFile;
                      return _regenerator2.default.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              console.log('buffer', buffer);
                              _context2.next = 3;
                              return _ipfs2.default.files.add(buffer);

                            case 3:
                              result = _context2.sent;
                              uploadedFile = result[0];

                              console.log('upload result', result);
                              param.success({
                                url: '' + _config2.default.ipfs.gateway + uploadedFile.hash,
                                meta: {
                                  // id: 'xxx',
                                  // title: 'xxx',
                                  // alt: 'xxx',
                                  // loop: true, // 指定音视频是否循环播放
                                  // autoPlay: true, // 指定音视频是否自动播放
                                  // controls: true, // 指定音视频是否显示控制栏
                                  // poster: 'http://xxx/xx.png', // 指定视频播放器的封面
                                }
                              });

                            case 7:
                            case 'end':
                              return _context2.stop();
                          }
                        }
                      }, _callee2, _this2);
                    }));

                    return function (_x4) {
                      return _ref4.apply(this, arguments);
                    };
                  }());
                } catch (error) {
                  errorFn();
                }

              case 2:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, _this2);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }(), _this.editorProps = {
      initialContent: '',
      media: {
        allowPasteImage: true, // 是否允许直接粘贴剪贴板图片（例如QQ截图等）到编辑器
        image: true, // 开启图片插入功能
        video: true, // 开启视频插入功能
        audio: true, // 开启音频插入功能
        validateFn: null, // 指定本地校验函数，说明见下文
        uploadFn: null, // 指定上传函数，说明见下文
        removeConfirmFn: null, // 指定删除前的确认函数，说明见下文
        onRemove: null, // 指定媒体库文件被删除时的回调，参数为被删除的媒体文件列表(数组)
        onChange: null, // 指定媒体库文件列表发生变化时的回调，参数为媒体库文件列表(数组)
        onInsert: null // 指定从媒体库插入文件到编辑器时的回调，参数为被插入的媒体文件列表(数组)
      },
      excludeControls: ['clear']
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Editor, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (typeof window !== 'undefined') {
        require('braft-editor/dist/index.css');
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', {
        style: {
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'stretch'
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 100
        }
      }, _react2.default.createElement('div', {
        style: {
          border: 'solid 1px rgba(0, 0, 0, 0.25)',
          borderRadius: '5px',
          marginBottom: '15px'
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 107
        }
      }, _react2.default.createElement(BraftEditorWithNoSSR, (0, _extends3.default)({}, _config2.default.braftEditor, this.editorProps, this.props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 114
        }
      }))));
    }
  }]);

  return Editor;
}(_react.Component);

exports.default = Editor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,